// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // Optional for pilots using JAL ID login
  role      Role     @default(PILOT)
  jalId     String?  @unique
  firstName String?
  lastName  String?
  callsign  String?
  isSuspended Boolean @default(false)
  suspensionReason String?
  suspendedAt DateTime?
  suspendedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  bookings  Booking[]
  events    Event[]   @relation("EventAdmin")
  
  @@map("users")
}

model Event {
  id             String   @id @default(cuid())
  title          String
  description    String?
  date           DateTime
  startTime      String
  endTime        String
  departure      String
  arrival        String
  aircraft       String?
  maxSlots       Int      @default(50)
  isActive       Boolean  @default(true)
  pilotBriefing  String?
  atcBriefing    String?
  sceneries      String?  // JSON string for scenery data
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  adminId        String
  admin          User     @relation("EventAdmin", fields: [adminId], references: [id])
  bookings       Booking[]
  
  @@map("events")
}

model Booking {
  id        String      @id @default(cuid())
  eventId   String
  userId    String
  callsign  String
  aircraft  String
  status    BookingStatus @default(PENDING)
  slotType  SlotType?
  gate      String?
  terminal  String?
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  event     Event @relation(fields: [eventId], references: [id])
  user      User  @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
  @@map("bookings")
}

model Flight {
  id          String   @id @default(cuid())
  flightNumber String   @unique
  departure   String
  arrival     String
  departureTime DateTime
  arrivalTime   DateTime
  aircraft    String
  status      FlightStatus @default(SCHEDULED)
  type        FlightType @default(DEPARTURE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("flights")
}

enum Role {
  PILOT
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum FlightStatus {
  SCHEDULED
  BOARDING
  DEPARTED
  ARRIVED
  DELAYED
  CANCELLED
}

enum FlightType {
  DEPARTURE
  ARRIVAL
}

enum SlotType {
  DEPARTURE
  LANDING
  PRIVATE
}